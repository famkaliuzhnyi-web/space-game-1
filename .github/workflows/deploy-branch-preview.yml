name: Deploy Branch Preview

on:
  push:
    branches-ignore:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build
      run: npm run build
      
    - name: Get branch name
      id: branch
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "branch_name=${{ github.head_ref }}" >> $GITHUB_OUTPUT
        else
          echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Prepare deployment directory
      run: |
        mkdir -p pages-deploy
        # Create branch-specific directory
        BRANCH_SAFE=$(echo "${{ steps.branch.outputs.branch_name }}" | sed 's/[^a-zA-Z0-9-]/-/g')
        mkdir -p "pages-deploy/${BRANCH_SAFE}"
        cp -r dist/* "pages-deploy/${BRANCH_SAFE}/"
        
        # Create index page with links to all branches if it doesn't exist
        if [ ! -f "pages-deploy/index.html" ]; then
          cat > pages-deploy/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Space Game - Branch Previews</title>
          <style>
            body { font-family: system-ui, sans-serif; max-width: 800px; margin: 0 auto; padding: 2rem; }
            .branch-list { list-style: none; padding: 0; }
            .branch-item { margin: 1rem 0; padding: 1rem; border: 1px solid #ddd; border-radius: 8px; }
            .branch-link { text-decoration: none; color: #0066cc; font-weight: bold; }
            .branch-link:hover { text-decoration: underline; }
          </style>
        </head>
        <body>
          <h1>ðŸš€ Space Game - Branch Previews</h1>
          <p>Choose a branch to view its preview:</p>
          <ul class="branch-list" id="branch-list">
            <li class="branch-item">Loading branches...</li>
          </ul>
          <script>
            // This will be populated by the deployment action
          </script>
        </body>
        </html>
        EOF
        fi
        
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'pages-deploy'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const branchSafe = '${{ steps.branch.outputs.branch_name }}'.replace(/[^a-zA-Z0-9-]/g, '-');
          const deployUrl = `${{ steps.deployment.outputs.page_url }}${branchSafe}/`;
          
          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes('ðŸ“± Branch Preview Deployed')
          );
          
          const commentBody = `## ðŸ“± Branch Preview Deployed
          
          Your Space Game branch preview is ready for mobile testing!
          
          **ðŸ”— Preview URL:** ${deployUrl}
          
          Perfect for checking results from your phone! ðŸ“±ðŸŽ®
          
          **QR Code:** 
          ![QR Code](https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(deployUrl)})
          
          `;
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }